import streamlit as st
import pandas as pd
from openai import OpenAI
import traceback
import re
import base64
import os

# Initialize OpenAI client with a custom API key
@st.cache_resource
def get_openai_client(api_key):
    return OpenAI(
        base_url="https://integrate.api.nvidia.com/v1",
         api_key=st.secrets["API_KEY"]
    )

def dataset_to_string(df):
    """Convert a dataset to a string format suitable for the model."""
    data_sample = df.head().to_string()
    data_info = df.describe(include='all').to_string()
    return f"Data Sample:\n{data_sample}\n\nData Description:\n{data_info}"

def create_ml_training_prompt(data_str, target_column):
    """Create a prompt for comprehensive machine learning model training and evaluation."""
    return f"""
    You are a highly skilled Machine Learning Engineer. I have provided you with a dataset containing various features, including the target column '{target_column}'. 
    Your task is to perform comprehensive model training and evaluation. 

    **Dataset Overview:**
    - **Data Sample:**
      ```
      {data_str.split('Data Description:')[0].strip()}
      ```
    - **Data Description:**
      ```
      {data_str.split('Data Description:')[1].strip()}
      ```

    Please create Python code that performs the following tasks with detailed comments and explanations:

    1. **Data Preparation:**
       - Separate features and the target variable.
       - Drop irrelevant columns based on statistical thresholds or domain knowledge.
       - Handle missing values using appropriate strategies for both numerical and categorical features.
       - Standardize numerical features and encode categorical features effectively.

    2. **Feature Selection:**
       - Identify and remove multicollinear features using correlation or variance inflation factor (VIF).
       - Use Recursive Feature Elimination (RFE) or Tree-based Feature Selection for dimensionality reduction.

    3. **Advanced Model Training:**
       - Train and evaluate the following machine learning models:
         - Logistic Regression
         - Random Forest
         - Gradient Boosting Machines (GBM)
         - XGBoost
         - LightGBM
         - CatBoost
         - Support Vector Machines (SVM)
         - K-Nearest Neighbors (KNN)
         - Multi-Layer Perceptron (MLP) Neural Networks
       - Use cross-validation (e.g., 5-fold or 10-fold) to evaluate performance.
       - Perform hyperparameter tuning for advanced models like XGBoost, LightGBM, and CatBoost using Grid Search or Random Search.

    4. **Performance Metrics:**
       - Report and visualize key metrics for each model, including:
         - Accuracy
         - Precision, Recall, F1-Score
         - AUC-ROC curves
         - Confusion Matrix
       - Explain the significance of each metric and its impact on model selection.

    5. **Model Comparison and Selection:**
       - Compare model performance based on the evaluation metrics.
       - Identify and explain the best-performing model with supporting evidence from metrics and visualizations.

    6. **Final Model Evaluation:**
       - Train the selected model on the entire training set.
       - Evaluate it on a separate test set, providing metrics and insights.
       - Generate feature importance plots for interpretability (if applicable).

    Ensure that all steps include sufficient explanations and rationale for your choices, making the code easy to follow and understand for non-technical users.
    """

def preprocess_generated_code(code):
    """Preprocess the code generated by the language model."""
    code = re.sub(r'```python|```', '', code)
    code = code.replace("'''", '"""')
    if "import matplotlib.pyplot as plt" not in code:
        code = "import matplotlib.pyplot as plt\n" + code
    if "import seaborn as sns" not in code:
        code = "import seaborn as sns\n" + code
    return code.strip()

def get_binary_file_downloader_html(bin_file, file_label='File'):
    with open(bin_file, 'rb') as f:
        data = f.read()
    bin_str = base64.b64encode(data).decode()
    href = f'<a href="data:application/octet-stream;base64,{bin_str}" download="{os.path.basename(bin_file)}">Download {file_label}</a>'
    return href

def main():
    st.title("MLAutoGen: Advanced Machine Learning Model Trainer")

    api_key = st.secrets["API_KEY"]

    uploaded_file = st.file_uploader("Choose a CSV file", type="csv")
    if uploaded_file is not None:
        df = pd.read_csv(uploaded_file)
        st.write("Dataset Preview:")
        st.dataframe(df.head())

        target_column = st.text_input("Enter the target column name:")
        if st.button("Generate ML Models"):
            if not target_column or target_column not in df.columns:
                st.error("Please provide a valid target column name.")
                return

            data_str = dataset_to_string(df)
            ml_prompt = create_ml_training_prompt(data_str, target_column)

            client = get_openai_client(api_key)

            try:
                with st.spinner("Generating ML model code..."):
                    completion = client.chat.completions.create(
                        model="meta/llama-3.1-8b-instruct",
                        messages=[{"role": "user", "content": ml_prompt}],
                        temperature=0.2,
                        top_p=0.7,
                        max_tokens=2048,
                        stream=True
                    )

                    generated_code = ""
                    for chunk in completion:
                        if chunk.choices[0].delta.content is not None:
                            generated_code += chunk.choices[0].delta.content

                processed_code = preprocess_generated_code(generated_code)

                st.subheader("Generated Code:")
                st.code(processed_code)

                file_path = "ML_model_generated.py"
                with open(file_path, "w") as f:
                    f.write(processed_code)
                st.success(f"Generated code saved to '{file_path}'")

                st.markdown(get_binary_file_downloader_html(file_path, 'Generated Python File'), unsafe_allow_html=True)

                st.warning("The generated code might require minor adjustments before execution.")

            except Exception as e:
                st.error("An error occurred during code generation.")
                st.exception(traceback.format_exc())

if __name__ == "__main__":
    main()
